<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Persistent Memory Development Kit (PMDK) on PMem.io</title><link>https://pmem.io/pmdk/</link><description>Recent content in Persistent Memory Development Kit (PMDK) on PMem.io</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pmem.io/pmdk/index.xml" rel="self" type="application/rss+xml"/><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/daxio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/daxio/</guid><description>The daxio utility daxio is a standalone utility that may be used to transfer data to or from Device DAX device or to wipe out data from a device.
See the daxio man page for current master documentation and examples or see older versions:
daxio version 1.11 daxio version 1.10 daxio version 1.9 daxio version 1.8 daxio version 1.7 daxio version 1.6 daxio version 1.5 daxio version 1.4</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/libpmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmem/</guid><description>The libpmem library libpmem provides low level persistent memory support. In particular, support for the persistent memory instructions for flushing changes to pmem is provided.
This library is provided for software which tracks every store to pmem and needs to flush those changes to durability. Most developers will find higher level libraries like libpmemobj to be much more convenient.
Man pages that contains a list of the Linux interfaces provided:</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/libpmem2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmem2/</guid><description>The libpmem2 library libpmem2 provides low-level persistent memory support. In particular, support for the persistent memory instructions for flushing changes to pmem is provided.
This library is provided for software that tracks every store to pmem and needs to flush those changes to durability. Most developers will find higher level libraries like libpmemobj to be much more convenient.
Man pages that contain a list of the Linux interfaces provided:
Man page for libpmem2 current master Man pages that contain a list of the Windows interfaces provided:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/libpmemblk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemblk/</guid><description>The libpmemblk library libpmemblk implements a pmem-resident array of blocks, all the same size, where a block is updated atomically with respect to power failure or program interruption (no torn blocks).
This library is provided for cases requiring large arrays of objects at least 512 bytes each. Most developers will find higher level libraries like libpmemobj to be more generally useful.
Man pages that contains a list of the Linux interfaces provided:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/libpmemlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemlog/</guid><description>The libpmemlog library libpmemlog implements a pmem-resident log file.
This library is provided for cases requiring an append-mostly file to record variable length entries. Most developers will find higher level libraries like libpmemobj to be more generally useful.
Man pages that contains a list of the Linux interfaces provided:
Man page for libpmemlog current master Man pages that contains a list of the Windows interfaces provided:
Man page for libpmemlog current master libpmemlog Examples More Detail Coming Soon 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include &amp;lt;stdio.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/libpmemobj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemobj/</guid><description>The libpmemobj library libpmemobj turns a persistent memory file into a flexible object store, supporting transactions, memory management, locking, lists, and a number of other features.
Man pages that contains a list of the Linux interfaces provided:
Man page for libpmemobj current master Man pages that contains a list of the Windows interfaces provided:
Man page for libpmemobj current master libpmemobj Examples The following series of blog articles provides a tutorial introduction to libpmemobj:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/libpmempool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmempool/</guid><description>The libpmempool library libpmempool provides a set of utilities for management, diagnostics and repair of persistent memory pools. By pool in this context we mean pmemobj pool, pmemblk pool, pmemlog pool or BTT layout, independent of the underlying storage. The libpmempool is for applications that need high reliability or built-in troubleshooting. It may be useful for testing and debugging purposes also.
Man pages that contains a list of the Linux interfaces provided:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/libpmemset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemset/</guid><description>The libpmemset library libpmemset aims to provide the core functionality any persistent application should have. The work is still in progress.
Man pages that contain a list of the Linux interfaces provided:
Man page for libpmemset current master Man pages that contain a list of the Windows interfaces provided:
Man page for libpmemset current master</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/librpmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/librpmem/</guid><description>The librpmem library librpmem provides low-level support for remote access to persistent memory (pmem) utilizing RDMA-capable RNICs. The library can be used to replicate remotely a memory region over RDMA protocol. It utilizes appropriate persistency mechanism based on remote node&amp;rsquo;s platform capabilities. The librpmem utilizes the ssh client to authenticate a user on remote node and for encryption of connection&amp;rsquo;s out-of-band configuration data. See SSH section for details.
This library is for applications that use remote persistent memory directly, without the help of any library-supplied transactions or memory allocation.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/vmem/libvmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/vmem/libvmem/</guid><description>The libvmem library libvmem supports the traditional malloc/free interfaces on a memory mapped file. This allows the use of persistent memory as volatile memory, for cases where the pool of persistent memory is useful to an application, but when the application doesn&amp;rsquo;t need it to be persistent.
Note: Since persistent memory support has been integrated into libmemkind, that library is the recommended choice for any new volatile usages, since it combines support for multiple types of volatile memory into a single, convenient API.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/vmem/libvmmalloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/vmem/libvmmalloc/</guid><description>The libvmmalloc library libvmmalloc interposes the traditional malloc/free interfaces and, in a way fully transparent to the program, substitutes the system heap with a volatile memory pool built on memory-mapped file. Such memory pool works in a similar manner as the memory pools provided by libvmem, except that it is created and destroyed automatically for each process that uses libvmmalloc.
The typical usage of libvmmalloc is to load it before all other libraries by setting the environment variable LD_PRELOAD.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/pmempool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/pmempool/</guid><description>The pmempool utility pmempool is a standalone utility for management and off-line analysis of persistent memory pools. It works for both the single-file pools and for pool set files. Below you can find a list of available commands.
See the pmempool man page for current master documentation and examples or see older versions:
pmempool version 1.11 pmempool version 1.10 pmempool version 1.9 pmempool version 1.8 pmempool version 1.7 pmempool version 1.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/pmreorder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/pmreorder/</guid><description>The pmreorder utility pmreorder is a standalone python tool that performs consistency check of persistent programs using a store reordering mechanism.
See the pmreorder man page for current master documentation and examples or see older versions:
pmreorder version 1.11 pmreorder version 1.10 pmreorder version 1.9 pmreorder version 1.8 pmreorder version 1.7 pmreorder version 1.6 pmreorder version 1.5</description></item></channel></rss>